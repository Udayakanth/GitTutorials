* Git Learning
** Basics
    - First time install git-scm
    - Two ways to use git in your project
    - initialize git in your project
    - clone the existing project
*** Create git in Your project
**** git init
     - To create a repository from existing directory of files, You can simply
       run $ git init
     - ex: current folder name is project1 then $cd project1; git init
     - in terminal you will see, Initialized empty Git repository in /project1/.git
     - git init, creates .git sub-folder here it store all the data of your
       project snapshots are stored
     - In a nutshell, you use git init to make an existing directory of the
       content into a new Git repository
     - You can do this in any directory at any time completely locally
**** git clone
     - if you need to collaborate with someone on project, or copy a public
       project in github, you need to clone the existing project
     - run git clone url command, with URL of the project you want to copy
     - git clone git://github.com/schacon/simplegit.git
     - git clone will copy the entire history of that project so you have it
       locally
     - In a nutshell you use $git clone url; will give you git repository of
       project in the given url

** Config
    - git --version
    - $ git --version
      git version 2.9.2.windows.1
    - SET CONFIG VALUES
    - git config --global user.name "your name"
    - git config --user.email "id@company.com"
    - git config --list
    - NEED HELP?
    - git help <verb>
    - git <verb> --help

** Initialization
    - git init
    - git status // to get the current tracking info of the project You are
      working
    - touch .gitignore //creates .gitignore file
    - .gitignore file contains file names which we dont want to track
    - ex: config (personnel preference file) ( font, font size, debug files .DS_Store...)
    - wild card entry is possible in .gitignore file, ex: *.txt, does not track
      all text files in current working directory // note this is not recursive
    - in .gitignore folder/abc/def.pdf, ignore def.pdf in folder/abc/
    - You have to manually enter the folder with file name which You don't want
      to track
    - git status -s // argument -s shows status in one line
      A  one.cpp

** Work Flow
    - 3 stages, 2 steps
    - working directory to staging area to final revision
      - step 1: working directory to staging area
      - git add -A // adds from working dir to stage area
      - if You want to remove files from staging area then enter command $ git reset
      - $git reset fileName // its a reverse process of working to staging area, its
        staging to working area
      - step 2: staging area to final revision
      - git commit -m " commit msg, what changes are made in this revision"

** Woking On Remote Project 
      - git clone <url> <where to clone>
      - git clone https://link.to.repository.git . // . indicates current directory
      - cloning can be done locally, from one folder to another folder
      - git clone /folder/abc /folder/def
      - git clone /folder/abc . // clone to current directory

** Commiting changes to Remote repository
      - git status; git add -A; git -m "changes"; then
      - git pull repoNameInGitHub master
      - pull is because any other developer changes made to the repository will
        be included to Your project, so that every developer will be workin on
        latest (recent) code
      - master indicates we are pulling data from master branch
      - git push repoNameInGitHub master
      - master indicates we are commiting to master branch

** Common Work Flow
    - create a branch for desired feature
    - git branch branchName //creates a branch
    - git branch -a // to view all branches in project
    - git checkout branchName //switches brach to given branch
    - 

http://coding4streetcred.com/blog/post/Configure-DiffMerge-for-Your-Git-DiffTool

** Extras
    - branching and merging info in text can be done by following command
    - git log --graph --pretty=oneline --abbrev-commit
    - git log --graph give detailed branching and merging with commit message
    - 

** Links
    - http://www.gitguys.com/
    - http://gitref.org/
    - https://progit.org/
    - Scott Chacon
    - 
