* Git Learning
** Basics
    - First time install git-scm
    - download link https://git-scm.com/download/win 

** Config
    - git --version
    - $ git --version
      git version 2.9.2.windows.1
    - SET CONFIG VALUES
    - git config --global user.name "your name"
    - git config --global user.email "id@company.com"
    - git config --list
    - NEED HELP?
    - git help <verb>
    - git <verb> --help

*** Create git in Your project
    - Two ways to use git in your project
    - initialize git in your project
    - or clone the existing project

**** git init
     - To create a repository from existing directory, You can simply
       run $ git init
     - ex: current folder name is project1 then $cd project1; git init
     - in terminal you will see, Initialized empty Git repository in /project1/.git
     - git init, creates .git sub-folder here it store all the data of your
       project snapshots are stored
     - In a nutshell, you use git init to make an existing directory 
       into a new Git repository
     - You can do this in any directory at any time completely locally

**** git clone
     - if you need to collaborate with someone on project, or copy a public
       project from github, you need to clone the existing project
     - run $git clone url command, with URL of the project you want to copy
     - git clone git://github.com/schacon/simplegit.git
     - git clone will copy the entire history of that project so you have it
       locally
     - In a nutshell you use $git clone url; will give you git repository of
       project in the given url to Your current working directory

** Creating Snapshot
    - 
    - 
*** git add
    - To start tracking file the first step is to run $git add command
    - this adds the file to the staging area
    - the next step is commiting file from staging area
    - You can't commit a file without adding it (to staging area)
    - git add file1.txt file2.txt will add both the file to staging area
    - git status -s 
      A  file1.txt file2.txt // note A at the beginnig of this line
    - argument -s shows status in few line
    - A at the beginning indicates file1.txt and file2.txt added to staging area
    - In a nutshell $git add is used to prepare a file for commit by staging it
    - git add -u //adds files which were modified and already added
    
*** git status 
    - view the status of your files in the working directory and staging area
    - it shows # Changes to be committed:
    - and un tracked files (newly added files in current directory)
    - this also tell you about files that were deleted since your last commit
    - git status -s shows compact version of current status of working directory

*** git diff 
    - 3 types of git diff are there
    - git diff // shows difference between untracked files vs staged files
    - git diff --cached //diff between staged files vs last commit files
    - git diff HEAD //untracked vs last commited files
    - shows diff of what is staged and what is modified but unstaged
    - git diff --stat is very useful, it outputs the files changed in untracked
      vs staged
    - git diff --cached --stat //it outputs file changed stats in staged vs
      last commit
    - git diff HEAD --stat // it outputs file changed stats in untracked vs
      last commit
    - ex: git diff --stat   //results in below output
          file1.txt | 2 ++  //2 changes both are addition
          file2.txt | 3 ++- //3 changes 2 addition(++) and 1(-) deletion
    - You can also provide a file path at the end of any of these options to
      limit the diff output to a specific file or subdirectory.
    - In a nutshell, you run git diff to see details of the git status command -
      how files have been modified or staged on a line by line basis

*** git commit
    - $git commit records a snapshot of the staging area
    - Git records your name and email address with every commit you make
    - git commit -a automatically stage all tracked, modified files before the
      commit
    - note -a only commits tracked files( earlier added files) not untracked
      files (new files)
    - git commit -m "your message" ,commits with given message
    - note: git commit -am "your commit message" stages tracked files and commits
    - In a nutshell, you run git commit to record the snapshot of your staged
      content, This snapshot can then be compared, shared and reverted to if you
      need to

*** git reset 
    - undo changes and commits
    - git reset HEAD unstage files from index and reset pointer to HEAD
    - when its needed?
    - if you accidentally staged files for commit which you don't want to
      commit then you can use git reset HEAD -- filename
    - git add u1.txt u2.txt then
    - git reset HEAD -- u1.txt //will unstage u1.txt (the file changes will be preserved)
    - git reset HEAD -- filename // will not reset the file contents, it just
      unstages it
    - When you run git reset without specifying a flag it defaults to --mixed
    - git reset --hard hashcode will go to the specified commit but but it
      keeps the untracked files as it, it does not delete untracked files


** Git Tips
    - $touch .gitignore //creates .gitignore file
    - .gitignore file contains file names which we dont want to track
    - ex: config (personnel preference file) ( font, font size, debug files .DS_Store...)
    - wild card entry is possible in .gitignore file, ex: *.txt, does not track
      all text files in current working directory // note this is not recursive
    - in .gitignore folder/abc/def.pdf, ignore def.pdf in folder/abc/
    - You have to manually enter the folder with file name which You don't want
      to track

    - git status // to get the current tracking info of the project You are
      working

    - git clean -df // removes untracked directory and files

** Work Flow
    - 3 stages, 2 steps
    - working directory to staging area to final revision
      - step 1: working directory to staging area
      - git add -A // adds from working dir to stage area
      - if You want to remove files from staging area then enter command $ git reset
      - $git reset fileName // its a reverse process of working to staging area, its
        staging to working area
      - step 2: staging area to final revision
      - git commit -m " commit msg, what changes are made in this revision"

** Woking On Remote Project 
      - git clone <url> <where to clone>
      - git clone https://link.to.repository.git . // . indicates current directory
      - cloning can be done locally, from one folder to another folder
      - git clone /folder/abc /folder/def
      - git clone /folder/abc . // clone to current directory

** Commiting changes to Remote repository
      - git status; git add -A; git -m "changes"; then
      - git pull repoNameInGitHub master
      - pull is because any other developer changes made to the repository will
        be included to Your project, so that every developer will be workin on
        latest (recent) code
      - master indicates we are pulling data from master branch
      - git push repoNameInGitHub master
      - master indicates we are commiting to master branch

** Common Work Flow
    - create a branch for desired feature
    - git branch branchName //creates a branch
    - git branch -a // to view all branches in project
    - git checkout branchName //switches brach to given branch
    - 

** Extras
    - branching and merging info in text can be done by following command
    - git log --graph --pretty=oneline --abbrev-commit
    - git log --graph give detailed branching and merging with commit message
    - 

** Links
    - http://www.gitguys.com/
    - http://gitref.org/
    - https://progit.org/
    - Scott Chacon
    - https://www.atlassian.com/git/
    - http://coding4streetcred.com/blog/post/Configure-DiffMerge-for-Your-Git-DiffTool
